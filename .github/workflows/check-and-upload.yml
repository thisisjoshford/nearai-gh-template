name: Check and Upload Agents

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_agents:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_result.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Identify new and modified agents
        id: check_agents
        run: |
          NEW_AGENTS=()
          MODIFIED_AGENTS=()
          
          # Get list of changed files in this commit/PR
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only origin/main HEAD)
          
          # Iterate through all subfolders in the agents directory
          for agent_dir in agents/*; do
            if [ -d "$agent_dir" ] && [ -f "$agent_dir/metadata.json" ]; then
              METADATA_PATH="$agent_dir/metadata.json"
              AGENT_DIR_RELATIVE=$(echo "$agent_dir" | sed 's|^./||')
              
              # Check if any files in this agent directory were modified
              AGENT_FILES_MODIFIED=false
              for file in $CHANGED_FILES; do
                if [[ $file == $AGENT_DIR_RELATIVE/* ]]; then
                  AGENT_FILES_MODIFIED=true
                  break
                fi
              done
              
              # Only process agents that have changes
              if [ "$AGENT_FILES_MODIFIED" = true ] || [[ "$CHANGED_FILES" == *"$METADATA_PATH"* ]]; then
                # Extract namespace and agent name from metadata.json
                NAMESPACE=$(jq -r .namespace "$METADATA_PATH")
                AGENT_NAME=$(jq -r .name "$METADATA_PATH")
                CURRENT_VERSION=$(jq -r .version "$METADATA_PATH")
                
                echo "Checking agent: $NAMESPACE/$AGENT_NAME (version: $CURRENT_VERSION)"
                
                # Check if the agent is new or modified
                if git show HEAD^:"$METADATA_PATH" &>/dev/null; then
                  PREVIOUS_VERSION=$(git show HEAD^:"$METADATA_PATH" | jq -r .version)
                  if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "Modified agent detected: $NAMESPACE/$AGENT_NAME"
                    MODIFIED_AGENTS+=("$agent_dir")
                  else
                    echo "::error::Version in $METADATA_PATH must be updated before pushing to main branch. Current version: $CURRENT_VERSION"
                    exit 1
                  fi
                else
                  echo "New agent detected: $NAMESPACE/$AGENT_NAME"
                  NEW_AGENTS+=("$agent_dir")
                fi
              else
                echo "Skipping agent in $agent_dir (no changes detected)"
              fi
            fi
          done

          # Output summary of what was found
          echo "New agents found: ${#NEW_AGENTS[@]}"
          echo "Modified agents found: ${#MODIFIED_AGENTS[@]}"
          
          # Set output variable to indicate if there are changes
          has_changes="false"
          if [ ${#NEW_AGENTS[@]} -gt 0 ] || [ ${#MODIFIED_AGENTS[@]} -gt 0 ]; then
            has_changes="true"
          fi
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT

      - name: Check result
        id: check_result
        run: |
          has_changes="false"
          if [ ${#NEW_AGENTS[@]} -gt 0 ] || [ ${#MODIFIED_AGENTS[@]} -gt 0 ]; then
            has_changes="true"
          fi
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT

  upload_agents:
    needs: check_agents
    runs-on: ubuntu-latest
    # Only run on pushes to main and when there are changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_agents.outputs.has_changes == 'true'
    env:
      ACCOUNT_1_NEAR_PRIVATE_KEY: ${{ secrets.ACCOUNT_1_NEAR_PRIVATE_KEY }}
      ACCOUNT_2_NEAR_PRIVATE_KEY: ${{ secrets.ACCOUNT_2_NEAR_PRIVATE_KEY }}
      # Add more as needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install NEAR AI CLI
        run: pip install nearai

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Identify and upload agents
        run: |
          # Get list of changed files in this commit
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          
          NEW_AGENTS=()
          MODIFIED_AGENTS=()

          # Identify new and modified agents
          for agent_dir in agents/*; do
            if [ -d "$agent_dir" ] && [ -f "$agent_dir/metadata.json" ]; then
              METADATA_PATH="$agent_dir/metadata.json"
              AGENT_DIR_RELATIVE=$(echo "$agent_dir" | sed 's|^./||')
              
              # Check if any files in this agent directory were modified
              AGENT_FILES_MODIFIED=false
              for file in $CHANGED_FILES; do
                if [[ $file == $AGENT_DIR_RELATIVE/* ]]; then
                  AGENT_FILES_MODIFIED=true
                  break
                fi
              done
              
              # Only process agents that have changes
              if [ "$AGENT_FILES_MODIFIED" = true ] || [[ "$CHANGED_FILES" == *"$METADATA_PATH"* ]]; then
                # Extract namespace, agent name, and version
                NAMESPACE=$(jq -r .namespace "$METADATA_PATH")
                AGENT_NAME=$(jq -r .name "$METADATA_PATH")
                CURRENT_VERSION=$(jq -r .version "$METADATA_PATH")
                
                # Check if the agent is new or modified
                if git show HEAD^:"$METADATA_PATH" &>/dev/null; then
                  PREVIOUS_VERSION=$(git show HEAD^:"$METADATA_PATH" | jq -r .version)
                  if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "Modified agent detected: $NAMESPACE/$AGENT_NAME"
                    MODIFIED_AGENTS+=("$agent_dir")
                  fi
                else
                  echo "New agent detected: $NAMESPACE/$AGENT_NAME"
                  NEW_AGENTS+=("$agent_dir")
                fi
              else
                echo "Skipping agent in $agent_dir (no changes detected)"
              fi
            fi
          done

            # Combine all agents that need uploading
            ALL_AGENTS=("${NEW_AGENTS[@]}" "${MODIFIED_AGENTS[@]}")
            
            # Upload agents
            for agent_dir in ${ALL_AGENTS[@]}; do
            METADATA_PATH="$agent_dir/metadata.json"
            NAMESPACE=$(jq -r .namespace "$METADATA_PATH")
            AGENT_NAME=$(jq -r .name "$METADATA_PATH")
            SECRET_NAME=$(echo $NAMESPACE | tr '[:lower:]' '[:upper:]' | tr '.-' '_')_PRIVATE_KEY

            if [ -n "$(printenv | grep $SECRET_NAME)" ]; then
              PRIVATE_KEY=$(printenv $SECRET_NAME)
              nearai login --accountId $NAMESPACE --privateKey $PRIVATE_KEY
              echo "Uploading agent: $NAMESPACE/$AGENT_NAME"
              nearai registry upload "$agent_dir"
            else
              echo "Skipping upload for $NAMESPACE/$AGENT_NAME due to missing private key"
            fi
            done
