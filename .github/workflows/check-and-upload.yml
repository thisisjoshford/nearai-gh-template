name: Check and Upload Agents

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_agents:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_result.outputs.has_changes }}
      agents_to_process: ${{ steps.check_agents.outputs.agents_to_process }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Identify new and modified agents
        id: check_agents
        run: |
          # Arrays to store agent directories
          NEW_AGENTS=()
          MODIFIED_AGENTS=()
          
          # Get list of changed files in this commit/PR
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only origin/main HEAD)
          
          # Iterate through all subfolders in the agents directory
          for agent_dir in agents/*; do
            if [ -d "$agent_dir" ] && [ -f "$agent_dir/metadata.json" ]; then
              METADATA_PATH="$agent_dir/metadata.json"
              AGENT_DIR_RELATIVE=$(echo "$agent_dir" | sed 's|^./||')
              
              # Check if any files in this agent directory were modified
              AGENT_FILES_MODIFIED=false
              for file in $CHANGED_FILES; do
                if [[ $file == $AGENT_DIR_RELATIVE/* ]]; then
                  AGENT_FILES_MODIFIED=true
                  break
                fi
              done
              
              # Only process agents that have changes
              if [ "$AGENT_FILES_MODIFIED" = true ] || [[ "$CHANGED_FILES" == *"$METADATA_PATH"* ]]; then
                # Extract namespace and agent name from metadata.json
                NAMESPACE=$(jq -r .namespace "$METADATA_PATH")
                AGENT_NAME=$(jq -r .name "$METADATA_PATH")
                CURRENT_VERSION=$(jq -r .version "$METADATA_PATH")
                
                echo "Checking agent: $NAMESPACE/$AGENT_NAME (version: $CURRENT_VERSION)"
                
                # Check if the agent is new or modified
                if git show HEAD^:"$METADATA_PATH" &>/dev/null; then
                  PREVIOUS_VERSION=$(git show HEAD^:"$METADATA_PATH" | jq -r .version)
                  if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "Modified agent detected: $NAMESPACE/$AGENT_NAME"
                    MODIFIED_AGENTS+=("$agent_dir")
                  else
                    echo "::error::Version in $METADATA_PATH must be updated before pushing to main branch. Current version: $CURRENT_VERSION"
                    exit 1
                  fi
                else
                  echo "New agent detected: $NAMESPACE/$AGENT_NAME"
                  NEW_AGENTS+=("$agent_dir")
                fi
              else
                echo "Skipping agent in $agent_dir (no changes detected)"
              fi
            fi
          done

          # Output summary of what was found
          echo "New agents found: ${#NEW_AGENTS[@]}"
          echo "Modified agents found: ${#MODIFIED_AGENTS[@]}"
          
          # Create JSON array of agents to process
          AGENTS_JSON="["
          for agent_dir in "${NEW_AGENTS[@]}" "${MODIFIED_AGENTS[@]}"; do
            if [ -n "$agent_dir" ]; then
              METADATA_PATH="$agent_dir/metadata.json"
              NAMESPACE=$(jq -r .namespace "$METADATA_PATH")
              AGENT_NAME=$(jq -r .name "$METADATA_PATH")
              AGENTS_JSON="${AGENTS_JSON}\"${NAMESPACE}/${AGENT_NAME}\","
            fi
          done
          AGENTS_JSON="${AGENTS_JSON%,}]"
          
          # If the array is empty (only has []), set it to empty array
          if [ "$AGENTS_JSON" = "[" ]; then
            AGENTS_JSON="[]"
          fi

          # Set output variables
          echo "agents_to_process=$AGENTS_JSON" >> $GITHUB_OUTPUT
          
          # Set has_changes flag
          HAS_CHANGES="false"
          if [ ${#NEW_AGENTS[@]} -gt 0 ] || [ ${#MODIFIED_AGENTS[@]} -gt 0 ]; then
            HAS_CHANGES="true"
          fi
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT
          echo "Found agents to process: $AGENTS_JSON"

  upload_agents:
    needs: check_agents
    runs-on: ubuntu-latest
    # Only run on pushes to main and when there are changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_agents.outputs.has_changes == 'true'
    env:
      ACCOUNT_1_NEAR_PRIVATE_KEY: ${{ secrets.ACCOUNT_1_NEAR_PRIVATE_KEY }}
      ACCOUNT_2_NEAR_PRIVATE_KEY: ${{ secrets.ACCOUNT_2_NEAR_PRIVATE_KEY }}
      # Add more as needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install NEAR AI CLI
        run: pip install nearai

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Upload agents
        if: needs.check_agents.outputs.agents_to_process != '[]'
        run: |
          AGENTS_TO_PROCESS='${{ needs.check_agents.outputs.agents_to_process }}'
          
          # Parse the JSON array
          echo "$AGENTS_TO_PROCESS" | jq -c '.[]' | while read -r agent; do
            # Remove quotes from the agent string
            agent=$(echo $agent | tr -d '"')
            
            # Split into namespace and agent name
            NAMESPACE=$(echo $agent | cut -d'/' -f1)
            AGENT_NAME=$(echo $agent | cut -d'/' -f2)
            AGENT_PATH="agents/$AGENT_NAME"
            
            # Convert namespace to uppercase and replace dots/hyphens with underscores for env var name
            SECRET_NAME=$(echo $NAMESPACE | tr '[:lower:]' '[:upper:]' | tr '.-' '_')_PRIVATE_KEY
            
            # Check if the secret exists
            if [ -n "${!SECRET_NAME+x}" ]; then
              # Use the secret directly without storing it in a variable
              echo "Uploading agent: $NAMESPACE/$AGENT_NAME"
              # Login with the namespace as account ID - use secret directly to avoid exposing in logs
              nearai login --accountId $NAMESPACE --privateKey "${!SECRET_NAME}"
              
              # Upload the agent
              nearai registry upload $AGENT_PATH
            else
              echo "Warning: No private key found for $NAMESPACE (looking for secret: $SECRET_NAME)"
              echo "Skipping upload for this agent"
            fi
          done
